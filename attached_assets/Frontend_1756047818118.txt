// frontend/src/App.tsx
import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useSoundEffects } from './hooks/useSoundEffects';
import { usePerformanceMonitor } from './utils/performanceMonitor';
import { ForgeDashboard } from './components/forge/ForgeDashboard';
import { AIUploadZone } from './components/forge/AIUploadZone';
import { EffectGenerator } from './components/forge/EffectGenerator';
import { LibraryBrowser } from './components/forge/LibraryBrowser';
import { EffectPreview } from './components/forge/EffectPreview';
import { AIStatusHub } from './components/forge/AIStatusHub';

// Variables CSS globales
const globalStyles = `
  :root {
    /* Palette Primaire - "Digital Fire" */
    --forge-black: #0a0a0f;
    --forge-dark: #1a1a2e;  
    --forge-purple: #16213e;
    --forge-electric: #0f4c75;
    --forge-cyan: #00d4ff;
    --forge-plasma: #ff006e;
    --forge-gold: #ffbe0b;
    --forge-white: #f8f9fa;

    /* Gradients Signatures */
    --neural-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    --plasma-gradient: linear-gradient(135deg, #ff006e 0%, #8338ec 50%, #3a86ff 100%);
    --forge-gradient: linear-gradient(135deg, #ffbe0b 0%, #ff006e 50%, #8338ec 100%);
  }

  body {
    background-color: var(--forge-black);
    color: var(--forge-white);
    font-family: 'Inter', sans-serif;
    overflow-x: hidden;
    margin: 0;
    padding: 0;
  }

  /* Effet de particules de fond */
  .particle-background {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    background: radial-gradient(circle at 20% 50%, rgba(15, 76, 117, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 80% 80%, rgba(255, 0, 110, 0.2) 0%, transparent 50%),
                radial-gradient(circle at 40% 20%, rgba(255, 190, 11, 0.2) 0%, transparent 50%);
  }

  /* Curseur personnalisé */
  .custom-cursor {
    width: 20px;
    height: 20px;
    border: 2px solid var(--forge-cyan);
    border-radius: 50%;
    position: fixed;
    pointer-events: none;
    z-index: 9999;
    transition: transform 0.1s ease;
    box-shadow: 0 0 15px var(--forge-cyan);
  }

  .cursor-trail {
    width: 8px;
    height: 8px;
    background-color: var(--forge-plasma);
    border-radius: 50%;
    position: fixed;
    pointer-events: none;
    z-index: 9998;
  }
`;

export const App = () => {
  const [activeView, setActiveView] = useState('dashboard');
  const [isProcessing, setIsProcessing] = useState(false);
  const { playSound } = useSoundEffects();
  usePerformanceMonitor();

  // Effet de particules de fond
  useEffect(() => {
    const createParticles = () => {
      const particleContainer = document.createElement('div');
      particleContainer.className = 'particle-background';
      document.body.appendChild(particleContainer);

      // Création des particules
      for (let i = 0; i < 50; i++) {
        const particle = document.createElement('div');
        particle.style.position = 'absolute';
        particle.style.width = `${Math.random() * 5 + 2}px`;
        particle.style.height = particle.style.width;
        particle.style.backgroundColor = `rgba(${Math.random() > 0.5 ? '255, 190, 11' : '0, 212, 255'}, ${Math.random() * 0.7 + 0.3})`;
        particle.style.borderRadius = '50%';
        particle.style.left = `${Math.random() * 100}%`;
        particle.style.top = `${Math.random() * 100}%`;
        particle.style.boxShadow = `0 0 ${Math.random() * 10 + 5}px currentColor`;
        particle.style.opacity = `${Math.random() * 0.5 + 0.2}`;
        particle.style.animation = `float ${Math.random() * 20 + 10}s infinite linear`;
        particleContainer.appendChild(particle);
      }
    };

    createParticles();

    // Curseur personnalisé
    const cursor = document.createElement('div');
    cursor.className = 'custom-cursor';
    document.body.appendChild(cursor);

    const trail = document.createElement('div');
    trail.className = 'cursor-trail';
    document.body.appendChild(trail);

    const handleMouseMove = (e: MouseEvent) => {
      cursor.style.left = `${e.clientX - 10}px`;
      cursor.style.top = `${e.clientY - 10}px`;
      
      setTimeout(() => {
        trail.style.left = `${e.clientX - 4}px`;
        trail.style.top = `${e.clientY - 4}px`;
      }, 50);
    };

    document.addEventListener('mousemove', handleMouseMove);

    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.body.removeChild(cursor);
      document.body.removeChild(trail);
    };
  }, []);

  // Gestion des transitions de vue
  const pageVariants = {
    initial: { 
      opacity: 0, 
      scale: 0.8, 
      rotateX: -15,
      filter: "blur(20px)" 
    },
    in: { 
      opacity: 1, 
      scale: 1, 
      rotateX: 0,
      filter: "blur(0px)" 
    },
    out: { 
      opacity: 0, 
      scale: 1.1, 
      rotateX: 15,
      filter: "blur(20px)" 
    }
  };

  const pageTransition = {
    type: "tween",
    ease: "anticipate",
    duration: 0.8
  };

  return (
    <>
      <style>{globalStyles}</style>
      <style>{`
        @keyframes float {
          0% { transform: translateY(0) translateX(0); }
          50% { transform: translateY(-20px) translateX(10px); }
          100% { transform: translateY(0) translateX(0); }
        }
        
        .glow-text {
          text-shadow: 0 0 10px var(--forge-cyan), 0 0 20px var(--forge-cyan);
        }
      `}</style>
      
      <div className="min-h-screen relative">
        {/* Navigation flottante */}
        <motion.nav 
          className="fixed top-6 left-1/2 transform -translate-x-1/2 z-50 bg-black/30 backdrop-blur-xl border border-white/10 rounded-full px-6 py-3 flex space-x-4"
          initial={{ y: -100 }}
          animate={{ y: 0 }}
          transition={{ delay: 0.5, type: "spring", stiffness: 100 }}
        >
          {['dashboard', 'upload', 'generator', 'library', 'preview', 'status'].map((view) => (
            <motion.button
              key={view}
              className={`px-4 py-2 rounded-full text-sm font-medium transition-all ${
                activeView === view 
                  ? 'bg-gradient-to-r from-cyan-500 to-purple-500 text-white' 
                  : 'text-white/70 hover:text-white'
              }`}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => {
                playSound('click');
                setActiveView(view);
              }}
            >
              {view.charAt(0).toUpperCase() + view.slice(1)}
            </motion.button>
          ))}
        </motion.nav>

        {/* Contenu principal */}
        <div className="pt-24 pb-16 px-4 max-w-7xl mx-auto">
          <AnimatePresence mode="wait">
            <motion.div
              key={activeView}
              variants={pageVariants}
              initial="initial"
              animate="in"
              exit="out"
              transition={pageTransition}
              className="min-h-[70vh]"
            >
              {activeView === 'dashboard' && <ForgeDashboard isProcessing={isProcessing} />}
              {activeView === 'upload' && <AIUploadZone />}
              {activeView === 'generator' && <EffectGenerator />}
              {activeView === 'library' && <LibraryBrowser />}
              {activeView === 'preview' && <EffectPreview />}
              {activeView === 'status' && <AIStatusHub isProcessing={isProcessing} />}
            </motion.div>
          </AnimatePresence>
        </div>

        {/* Footer avec Easter Egg */}
        <motion.footer 
          className="text-center py-6 text-white/50 text-sm"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 1.5 }}
        >
          <p>EffectForge AI - Digital Forge of the Future</p>
          <p className="mt-2 opacity-0 hover:opacity-100 transition-opacity">
            Konami Code: ↑↑↓↓←→←→BA
          </p>
        </motion.footer>
      </div>
    </>
  );
};

// frontend/src/components/forge/ForgeDashboard.tsx
import { motion } from 'framer-motion';
import { AIStatusOrb } from '../ui/AIStatusOrb';
import { ModuleGrid } from '../ui/ModuleGrid';
import { HolographicPanels } from '../ui/HolographicPanels';
import { ParticleBackground } from '../effects/ParticleBackground';

interface ForgeDashboardProps {
  isProcessing: boolean;
}

export const ForgeDashboard = ({ isProcessing }: ForgeDashboardProps) => {
  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.9 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 1.2, ease: "easeOutQuart" }}
      className="forge-dashboard relative"
    >
      <ParticleBackground type="neural-fire" />
      
      <div className="relative z-10">
        <motion.h1 
          className="text-5xl md:text-7xl font-bold text-center mb-12 bg-clip-text text-transparent bg-gradient-to-r from-cyan-400 via-purple-500 to-pink-500 glow-text"
          initial={{ y: -50, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ delay: 0.3, type: "spring" }}
        >
          DIGITAL FORGE
        </motion.h1>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-12">
          <HolographicPanels />
          <div className="flex flex-col items-center justify-center">
            <AIStatusOrb pulsing={isProcessing} />
            <motion.p 
              className="mt-4 text-center text-cyan-300"
              animate={{ opacity: [0.5, 1, 0.5] }}
              transition={{ duration: 2, repeat: Infinity }}
            >
              {isProcessing ? "FORGING EFFECTS..." : "READY TO CREATE"}
            </motion.p>
          </div>
          <div className="bg-black/20 backdrop-blur-xl border border-white/10 rounded-2xl p-6">
            <h3 className="text-xl font-semibold mb-4 text-purple-300">System Status</h3>
            <div className="space-y-3">
              {['Neural Network', 'Render Engine', 'Effect Library', 'AI Core'].map((system, index) => (
                <motion.div 
                  key={system}
                  className="flex items-center"
                  initial={{ x: -20, opacity: 0 }}
                  animate={{ x: 0, opacity: 1 }}
                  transition={{ delay: 0.5 + index * 0.1 }}
                >
                  <div className={`w-3 h-3 rounded-full mr-3 ${index % 2 === 0 ? 'bg-green-500' : 'bg-cyan-500'}`}></div>
                  <span>{system}</span>
                  <span className="ml-auto text-green-400">Online</span>
                </motion.div>
              ))}
            </div>
          </div>
        </div>
        
        <ModuleGrid animated={true} />
      </div>
    </motion.div>
  );
};

// frontend/src/components/forge/AIUploadZone.tsx
import { useState, useCallback } from 'react';
import { motion } from 'framer-motion';
import { useDropzone } from 'react-dropzone';
import { useSoundEffects } from '../../hooks/useSoundEffects';

export const AIUploadZone = () => {
  const [files, setFiles] = useState<File[]>([]);
  const [isPortalOpen, setIsPortalOpen] = useState(false);
  const { playSound } = useSoundEffects();

  const onDrop = useCallback((acceptedFiles: File[]) => {
    playSound('portalOpen');
    setIsPortalOpen(true);
    
    setTimeout(() => {
      setFiles(acceptedFiles);
      playSound('success');
      setIsPortalOpen(false);
    }, 1500);
  }, [playSound]);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'image/*': ['.jpeg', '.jpg', '.png', '.gif', '.webp'],
      'video/*': ['.mp4', '.mov', '.avi', '.webm']
    },
    maxFiles: 5
  });

  return (
    <div className="min-h-[70vh] flex flex-col items-center justify-center">
      <motion.h2 
        className="text-4xl font-bold mb-8 text-center bg-clip-text text-transparent bg-gradient-to-r from-cyan-400 to-purple-500"
        initial={{ y: -30, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ type: "spring" }}
      >
        DIMENSIONAL PORTAL
      </motion.h2>
      
      <motion.div
        {...getRootProps()}
        className={`relative w-full max-w-2xl h-96 rounded-3xl border-4 border-dashed flex flex-col items-center justify-center cursor-pointer transition-all ${
          isDragActive 
            ? 'border-cyan-500 bg-cyan-500/10' 
            : 'border-purple-500/50 hover:border-purple-500'
        }`}
        whileHover={{ scale: 1.02 }}
        whileTap={{ scale: 0.98 }}
        initial={{ scale: 0.9, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        transition={{ type: "spring", stiffness: 100 }}
      >
        <input {...getInputProps()} />
        
        {/* Effet de portail */}
        <motion.div 
          className="absolute inset-0 rounded-3xl overflow-hidden"
          animate={{
            background: isPortalOpen 
              ? 'radial-gradient(circle, rgba(0,212,255,0.4) 0%, rgba(255,0,110,0.2) 70%, rgba(26,26,46,0.8) 100%)' 
              : 'radial-gradient(circle, rgba(15,76,117,0.2) 0%, rgba(26,26,46,0.8) 100%)'
          }}
          transition={{ duration: 0.8 }}
        >
          {isPortalOpen && (
            <>
              <motion.div 
                className="absolute inset-0"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ duration: 0.5 }}
              >
                {[...Array(20)].map((_, i) => (
                  <motion.div
                    key={i}
                    className="absolute w-2 h-2 bg-cyan-400 rounded-full"
                    style={{
                      left: `${Math.random() * 100}%`,
                      top: `${Math.random() * 100}%`,
                    }}
                    animate={{
                      x: [0, (Math.random() - 0.5) * 200],
                      y: [0, (Math.random() - 0.5) * 200],
                      opacity: [0, 1, 0],
                      scale: [0, 1.5, 0]
                    }}
                    transition={{
                      duration: Math.random() * 1 + 0.5,
                      repeat: Infinity,
                      delay: Math.random() * 2
                    }}
                  />
                ))}
              </motion.div>
              
              <motion.div 
                className="absolute inset-0 flex items-center justify-center"
                initial={{ scale: 0 }}
                animate={{ scale: [0, 1.2, 1] }}
                transition={{ duration: 0.8 }}
              >
                <div className="w-32 h-32 rounded-full border-4 border-cyan-400 animate-ping"></div>
              </motion.div>
            </>
          )}
        </motion.div>
        
        <div className="relative z-10 text-center p-8">
          <motion.div
            animate={{ y: [0, -10, 0] }}
            transition={{ duration: 2, repeat: Infinity }}
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 mx-auto text-purple-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
            </svg>
          </motion.div>
          
          <p className="text-xl font-medium mb-2">
            {isDragActive ? 'Drop files here...' : 'Drag & drop files here'}
          </p>
          <p className="text-gray-400 mb-4">or click to browse files</p>
          
          <div className="flex justify-center space-x-2">
            {['Image', 'Video', '3D Model'].map((type) => (
              <span key={type} className="px-3 py-1 bg-purple-900/50 text-purple-300 rounded-full text-sm">
                {type}
              </span>
            ))}
          </div>
        </div>
      </motion.div>
      
      {files.length > 0 && (
        <motion.div 
          className="mt-8 w-full max-w-2xl"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
        >
          <h3 className="text-xl font-semibold mb-4 text-cyan-300">Ready for Processing:</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {files.map((file, index) => (
              <motion.div
                key={index}
                className="bg-black/30 backdrop-blur-sm border border-white/10 rounded-xl p-4 flex items-center"
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.1 * index }}
                whileHover={{ scale: 1.03 }}
              >
                <div className="mr-4">
                  {file.type.startsWith('image/') ? (
                    <div className="w-12 h-12 rounded-lg bg-gradient-to-br from-cyan-500 to-purple-500 flex items-center justify-center">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                    </div>
                  ) : (
                    <div className="w-12 h-12 rounded-lg bg-gradient-to-br from-pink-500 to-purple-500 flex items-center justify-center">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                      </svg>
                    </div>
                  )}
                </div>
                <div>
                  <p className="font-medium truncate">{file.name}</p>
                  <p className="text-sm text-gray-400">{(file.size / 1024 / 1024).toFixed(2)} MB</p>
                </div>
              </motion.div>
            ))}
          </div>
          
          <motion.button
            className="mt-6 w-full py-3 bg-gradient-to-r from-cyan-600 to-purple-600 rounded-xl font-medium"
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            onClick={() => {
              // Simuler le traitement
              // setFiles([]);
            }}
          >
            Process Files
          </motion.button>
        </motion.div>
      )}
    </div>
  );
};

// frontend/src/components/ui/PlasmaButton.tsx
import { motion } from 'framer-motion';

interface PlasmaButtonProps {
  children: React.ReactNode;
  onClick?: () => void;
  className?: string;
  disabled?: boolean;
}

export const PlasmaButton = ({ children, onClick, className = '', disabled = false }: PlasmaButtonProps) => {
  return (
    <motion.button
      className={`
        px-8 py-4 
        bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600
        hover:from-purple-500 hover:via-pink-500 hover:to-blue-500
        rounded-xl
        shadow-2xl hover:shadow-purple-500/25
        transform hover:scale-105 hover:-translate-y-1
        transition-all duration-300 ease-out
        border border-white/20
        backdrop-blur-sm
        relative overflow-hidden
        before:absolute before:inset-0 
        before:bg-gradient-to-r before:from-transparent before:via-white/20 before:to-transparent
        before:-translate-x-full hover:before:translate-x-full
        before:transition-transform before:duration-700
        disabled:opacity-50 disabled:cursor-not-allowed
        ${className}
      `}
      whileHover={{ scale: disabled ? 1 : 1.05 }}
      whileTap={{ scale: disabled ? 1 : 0.95 }}
      onClick={onClick}
      disabled={disabled}
    >
      <span className="relative z-10 font-medium">{children}</span>
    </motion.button>
  );
};

// frontend/src/components/ui/HolographicCard.tsx
import { motion } from 'framer-motion';

interface HolographicCardProps {
  children: React.ReactNode;
  className?: string;
  onClick?: () => void;
}

export const HolographicCard = ({ children, className = '', onClick }: HolographicCardProps) => {
  return (
    <motion.div
      className={`
        bg-white/5 backdrop-blur-xl 
        border border-white/10
        rounded-2xl p-6
        shadow-2xl
        hover:shadow-cyan-500/20
        hover:border-cyan-500/30
        transform hover:rotate-1 hover:scale-[1.02]
        transition-all duration-500 ease-out
        relative
        before:absolute before:inset-0
        before:bg-gradient-to-br before:from-white/5 before:to-transparent
        before:rounded-2xl before:pointer-events-none
        ${onClick ? 'cursor-pointer' : ''}
        ${className}
      `}
      whileHover={onClick ? { y: -5 } : {}}
      onClick={onClick}
    >
      {children}
    </motion.div>
  );
};

// frontend/src/components/ui/NeuralInput.tsx
import { motion } from 'framer-motion';

interface NeuralInputProps {
  type?: string;
  placeholder?: string;
  value?: string;
  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
  className?: string;
}

export const NeuralInput = ({ 
  type = "text", 
  placeholder = "", 
  value = "", 
  onChange, 
  className = "" 
}: NeuralInputProps) => {
  return (
    <motion.div
      className="relative"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.3 }}
    >
      <input
        type={type}
        placeholder={placeholder}
        value={value}
        onChange={onChange}
        className={`
          bg-black/20 backdrop-blur-sm
          border-2 border-purple-500/30
          rounded-xl px-4 py-3
          focus:border-cyan-400 focus:shadow-lg focus:shadow-cyan-400/20
          focus:bg-black/40
          transition-all duration-300
          placeholder-white/40
          text-white
          w-full
          ${className}
        `}
      />
      <motion.div
        className="absolute inset-0 rounded-xl border-2 border-transparent pointer-events-none"
        animate={{
          borderColor: value ? "rgba(0, 212, 255, 0.7)" : "transparent",
          boxShadow: value ? "0 0 15px rgba(0, 212, 255, 0.3)" : "none"
        }}
        transition={{ duration: 0.3 }}
      />
    </motion.div>
  );
};

// frontend/src/components/ui/LoadingDNA.tsx
import { motion } from 'framer-motion';

export const LoadingDNA = () => (
  <div className="flex items-center justify-center">
    <motion.div
      animate={{ rotate: 360 }}
      transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
      className="relative w-20 h-20"
    >
      <div className="absolute inset-0 border-4 border-cyan-500/30 rounded-full" />
      <div className="absolute inset-2 border-4 border-purple-500/50 rounded-full" />
      <div className="absolute inset-4 border-4 border-pink-500/70 rounded-full" />
    </motion.div>
  </div>
);

// frontend/src/components/ui/AIStatusOrb.tsx
import { motion } from 'framer-motion';

interface AIStatusOrbProps {
  pulsing: boolean;
}

export const AIStatusOrb = ({ pulsing }: AIStatusOrbProps) => {
  return (
    <motion.div
      className="relative w-48 h-48 flex items-center justify-center"
      animate={pulsing ? {
        scale: [1, 1.1, 1],
      } : {}}
      transition={{
        duration: 2,
        repeat: pulsing ? Infinity : 0,
        repeatType: "reverse"
      }}
    >
      <motion.div
        className="absolute inset-0 rounded-full bg-gradient-to-br from-cyan-500 to-purple-600 opacity-20"
        animate={pulsing ? {
          scale: [1, 1.3, 1],
          opacity: [0.2, 0.05, 0.2]
        } : {}}
        transition={{
          duration: 2,
          repeat: pulsing ? Infinity : 0,
          repeatType: "reverse"
        }}
      />
      
      <motion.div
        className="absolute w-32 h-32 rounded-full bg-gradient-to-br from-cyan-400 to-purple-500 flex items-center justify-center"
        animate={pulsing ? {
          boxShadow: [
            "0 0 20px rgba(0, 212, 255, 0.7)",
            "0 0 40px rgba(0, 212, 255, 0.9)",
            "0 0 20px rgba(0, 212, 255, 0.7)"
          ]
        } : {
          boxShadow: "0 0 15px rgba(0, 212, 255, 0.5)"
        }}
        transition={{
          duration: 1.5,
          repeat: pulsing ? Infinity : 0,
          repeatType: "reverse"
        }}
      >
        <motion.div
          className="w-24 h-24 rounded-full bg-black/30 flex items-center justify-center"
          animate={pulsing ? {
            rotate: 360
          } : {}}
          transition={{
            duration: 10,
            repeat: pulsing ? Infinity : 0,
            ease: "linear"
          }}
        >
          <div className="text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-cyan-300 to-purple-300">
            AI
          </div>
        </motion.div>
      </motion.div>
    </motion.div>
  );
};

// frontend/src/components/ui/ModuleGrid.tsx
import { motion } from 'framer-motion';

interface ModuleGridProps {
  animated: boolean;
}

export const ModuleGrid = ({ animated }: ModuleGridProps) => {
  const modules = [
    { name: "Neural Enhance", color: "from-cyan-500 to-blue-500" },
    { name: "Plasma Burst", color: "from-purple-500 to-pink-500" },
    { name: "Quantum Shift", color: "from-green-500 to-teal-500" },
    { name: "Void Distortion", color: "from-yellow-500 to-orange-500" },
    { name: "Photon Forge", color: "from-red-500 to-pink-500" },
    { name: "Time Warp", color: "from-indigo-500 to-purple-500" },
  ];

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
      {modules.map((module, index) => (
        <motion.div
          key={module.name}
          className={`bg-gradient-to-br ${module.color} rounded-2xl p-1 shadow-lg`}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 * index, type: "spring" }}
          whileHover={{ y: -10 }}
        >
          <div className="bg-black/80 backdrop-blur-sm rounded-2xl p-6 h-full">
            <h3 className="text-xl font-bold mb-3 text-white">{module.name}</h3>
            <p className="text-gray-300 mb-4">Advanced effect module with real-time processing</p>
            <div className="flex justify-between items-center">
              <span className="text-xs px-2 py-1 bg-white/10 rounded-full">ACTIVE</span>
              <div className="w-8 h-8 rounded-full bg-white/10 flex items-center justify-center">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                </svg>
              </div>
            </div>
          </div>
        </motion.div>
      ))}
    </div>
  );
};

// frontend/src/components/ui/HolographicPanels.tsx
import { motion } from 'framer-motion';

export const HolographicPanels = () => {
  const stats = [
    { title: "Effects Created", value: "1,248", change: "+12%" },
    { title: "Processing Power", value: "98%", change: "+2%" },
    { title: "Active Users", value: "427", change: "+24%" },
    { title: "Render Time", value: "0.8s", change: "-15%" },
  ];

  return (
    <div className="grid grid-cols-2 gap-4">
      {stats.map((stat, index) => (
        <motion.div
          key={stat.title}
          className="bg-black/30 backdrop-blur-sm border border-white/10 rounded-xl p-4"
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ delay: 0.2 * index }}
          whileHover={{ y: -5 }}
        >
          <p className="text-gray-400 text-sm">{stat.title}</p>
          <div className="flex items-baseline mt-1">
            <span className="text-2xl font-bold">{stat.value}</span>
            <span className={`ml-2 text-sm ${stat.change.startsWith('+') ? 'text-green-400' : 'text-red-400'}`}>
              {stat.change}
            </span>
          </div>
          <div className="mt-2 h-1 bg-gray-700 rounded-full overflow-hidden">
            <motion.div
              className="h-full bg-gradient-to-r from-cyan-500 to-purple-500"
              initial={{ width: 0 }}
              animate={{ width: `${Math.min(100, parseInt(stat.value) + 20)}%` }}
              transition={{ delay: 0.5 + index * 0.1, duration: 1 }}
            />
          </div>
        </motion.div>
      ))}
    </div>
  );
};

// frontend/src/components/effects/ParticleBackground.tsx
import { motion } from 'framer-motion';

interface ParticleBackgroundProps {
  type: string;
}

export const ParticleBackground = ({ type }: ParticleBackgroundProps) => {
  return (
    <div className="absolute inset-0 overflow-hidden pointer-events-none">
      {type === 'neural-fire' && (
        <>
          {[...Array(30)].map((_, i) => (
            <motion.div
              key={i}
              className="absolute rounded-full"
              style={{
                width: `${Math.random() * 10 + 2}px`,
                height: `${Math.random() * 10 + 2}px`,
                backgroundColor: `rgba(${Math.random() > 0.5 ? '255, 190, 11' : '0, 212, 255'}, ${Math.random() * 0.5 + 0.3})`,
                left: `${Math.random() * 100}%`,
                top: `${Math.random() * 100}%`,
                boxShadow: `0 0 ${Math.random() * 10 + 5}px currentColor`,
              }}
              animate={{
                x: [0, (Math.random() - 0.5) * 100],
                y: [0, (Math.random() - 0.5) * 100],
                opacity: [0, Math.random() * 0.7 + 0.3, 0],
              }}
              transition={{
                duration: Math.random() * 10 + 10,
                repeat: Infinity,
                delay: Math.random() * 5,
              }}
            />
          ))}
          
          {/* Réseau neuronal */}
          <svg className="absolute inset-0 w-full h-full" style={{ opacity: 0.1 }}>
            {[...Array(15)].map((_, i) => (
              <motion.line
                key={i}
                x1={Math.random() * 100 + '%'}
                y1={Math.random() * 100 + '%'}
                x2={Math.random() * 100 + '%'}
                y2={Math.random() * 100 + '%'}
                stroke="currentColor"
                strokeWidth="1"
                strokeDasharray="5,5"
                animate={{
                  strokeDashoffset: [0, 10],
                }}
                transition={{
                  duration: Math.random() * 10 + 5,
                  repeat: Infinity,
                  repeatType: "reverse",
                }}
              />
            ))}
          </svg>
        </>
      )}
    </div>
  );
};

// frontend/src/hooks/useSoundEffects.ts
export const useSoundEffects = () => {
  const playSound = (soundName: string) => {
    // Dans une implémentation réelle, nous jouerions des sons ici
    console.log(`Playing sound: ${soundName}`);
    
    // Simulation de sons avec l'API Web Audio
    try {
      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();
      
      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);
      
      switch(soundName) {
        case 'click':
          oscillator.type = 'sine';
          oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
          gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
          gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.1);
          break;
        case 'portalOpen':
          oscillator.type = 'sawtooth';
          oscillator.frequency.setValueAtTime(200, audioContext.currentTime);
          oscillator.frequency.exponentialRampToValueAtTime(800, audioContext.currentTime + 0.5);
          gainNode.gain.setValueAtTime(0.2, audioContext.currentTime);
          gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.5);
          break;
        case 'success':
          oscillator.type = 'sine';
          oscillator.frequency.setValueAtTime(523.25, audioContext.currentTime); // C5
          oscillator.frequency.setValueAtTime(659.25, audioContext.currentTime + 0.1); // E5
          oscillator.frequency.setValueAtTime(783.99, audioContext.currentTime + 0.2); // G5
          gainNode.gain.setValueAtTime(0.2, audioContext.currentTime);
          gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.3);
          break;
        default:
          return;
      }
      
      oscillator.start();
      oscillator.stop(audioContext.currentTime + 0.5);
    } catch (e) {
      console.log("Web Audio API not supported");
    }
  };

  return { playSound };
};

// frontend/src/utils/performanceMonitor.ts
export const usePerformanceMonitor = () => {
  // Dans une implémentation réelle, nous surveillerions les performances ici
  console.log("Performance monitor initialized");
  
  // Simulation de surveillance des performances
  if (typeof window !== 'undefined') {
    const observer = new PerformanceObserver((list) => {
      for (const entry of list.getEntries()) {
        if (entry.entryType === 'largest-contentful-paint') {
          console.log(`LCP: ${entry.startTime}ms`);
        }
      }
    });
    
    try {
      observer.observe({ type: 'largest-contentful-paint', buffered: true });
    } catch (e) {
      console.log("Performance monitoring not fully supported");
    }
  }
};