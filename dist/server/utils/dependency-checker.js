import { exec } from 'child_process';
import { promisify } from 'util';
const execAsync = promisify(exec);
const execAsync = promisify(exec);
export class DependencyChecker {
    static requiredCommands = [
        'tsx',
        'tsc',
        'vite',
        'drizzle-kit'
    ];
    static async checkAllDependencies() {
        const issues = [];
        for (const command of this.requiredCommands) {
            try {
                await execAsync(`which ${command}`);
            }
            catch (error) {
                // Command not found, check if it's in node_modules
                try {
                    await execAsync(`npx ${command} --version`);
                }
                catch (npxError) {
                    issues.push({
                        command,
                        missing: true,
                        solution: await this.getSolution(command)
                    });
                }
            }
        }
        return issues;
    }
    static async getSolution(command) {
        const solutions = {
            'tsx': 'npm install tsx --save-dev',
            'tsc': 'npm install typescript --save-dev',
            'vite': 'npm install vite --save-dev',
            'drizzle-kit': 'npm install drizzle-kit --save-dev'
        };
        return solutions[command] || `npm install ${command}`;
    }
    static async autoFixDependencies() {
        try {
            console.log('üîç V√©rification des d√©pendances...');
            const issues = await this.checkAllDependencies();
            if (issues.length === 0) {
                console.log('‚úÖ Toutes les d√©pendances sont pr√©sentes');
                return true;
            }
            console.log(`‚ùå ${issues.length} d√©pendances manquantes d√©tect√©es`);
            // Auto-installation des d√©pendances manquantes
            for (const issue of issues) {
                console.log(`üì¶ Installation de ${issue.command}...`);
                try {
                    await execAsync(issue.solution);
                    console.log(`‚úÖ ${issue.command} install√© avec succ√®s`);
                }
                catch (installError) {
                    console.log(`‚ùå √âchec installation ${issue.command}:`, installError.message);
                    return false;
                }
            }
            // V√©rification finale
            const finalCheck = await this.checkAllDependencies();
            if (finalCheck.length === 0) {
                console.log('üéâ Toutes les d√©pendances sont maintenant install√©es');
                return true;
            }
            return false;
        }
        catch (error) {
            console.error('‚ùå Erreur lors de la v√©rification des d√©pendances:', error);
            return false;
        }
    }
    if(issues, length) { }
}
 > 0;
{
    console.log('‚ö†Ô∏è D√©pendances manquantes d√©tect√©es:');
    issues.forEach(issue => {
        console.log(`  - ${issue.command}: ${issue.solution}`);
    });
    console.log('üõ†Ô∏è Installation automatique des d√©pendances...');
    await execAsync('npm install');
    // V√©rification post-installation
    console.log('üîÑ Re-v√©rification des d√©pendances...');
    const remainingIssues = await this.checkAllDependencies();
    if (remainingIssues.length > 0) {
        console.log('‚ö†Ô∏è Certaines d√©pendances n√©cessitent une installation sp√©cifique:');
        for (const issue of remainingIssues) {
            try {
                console.log(`üîß Installation de ${issue.command}...`);
                await execAsync(issue.solution);
            }
            catch (installError) {
                console.error(`‚ùå √âchec installation ${issue.command}:`, installError);
            }
        }
    }
    console.log('‚úÖ D√©pendances install√©es avec succ√®s!');
    return true;
}
console.log('‚úÖ Toutes les d√©pendances sont pr√©sentes');
return true;
try { }
catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des d√©pendances:', error);
    return false;
}
